# @package _global_

# This configuration file contains only the most important configuration parameters. See example configurations with
# all supported parameters and their description at https://albumentations.ai/docs/autoalbument/example_configs/. You
# can add any of those supported parameters to this file.

# As an alternative, you could generate a new config file that contains all parameters (and not a subset of them)
# by running:
# autoalbument-create --config-dir @@config_dir --task @@task --num-classes @@num_classes --generate-full-config


task: semantic_segmentation

# Settings for Policy Model that searches augmentation policies.
policy_model:

  # Number of augmentation sub-policies. When an image passes through an augmentation pipeline, Faster AutoAugment
  # randomly chooses one sub-policy and uses augmentations from that sub-policy to transform an input image. A larger
  # number of sub-policies leads to a more diverse set of augmentations and better performance of a model trained on
  # augmented images. However, an increase in the number of sub-policies leads to the exponential growth of a search
  # space of augmentations, so you need more training data for Policy Model to find good augmentation policies.
  num_sub_policies: 25

  # Number of chunks in a batch. Faster AutoAugment splits each batch of images into `num_chunks` chunks. Then it
  # applies the same sub-policy with the same parameters to each image in a chunk. This parameter controls the tradeoff
  # between the speed of augmentation search and diversity of augmentations. Larger `num_chunks` values will lead to
  # faster searching but less diverse set of augmentations. Note that this parameter is used only in the searching
  # phase. When you train a model with found sub-policies, Albumentations will apply a distinct set of transformations
  # to each image separately.
  num_chunks: 4

# Settings for Semantic Segmentation Model that is used for two purposes:
# 1. As a model that performs semantic segmentation of input images.
# 2. As a Discriminator for Policy Model.
semantic_segmentation_model:
  # By default, AutoAlbument uses an instance of `autoalbument.faster_autoaugment.models.SemanticSegmentationModel` as
  # a semantic segmentation model.
  # This model takes four parameters: `num_classes`, `architecture`, `encoder_architecture` and `pretrained`.
  _target_: autoalbument.faster_autoaugment.models.SemanticSegmentationModel

  # The number of classes in the dataset. The dataset implementation should return a mask as a NumPy array with
  # the shape [height, width, num_classes]. In a case of binary segmentation you can set `num_classes` to 1.
  num_classes: @@num_classes

  # The architecture of Semantic Segmentation Model. AutoAlbument uses models from
  # https://github.com/qubvel/segmentation_models.pytorch. Please refer to its documentation to get a list of available
  # models - https://github.com/qubvel/segmentation_models.pytorch#models-.
  architecture: Unet

  # The architecture of encoder in Semantic Segmentation Model. Please refer to Segmentation Models' documentation to
  # get a list of available encoders - https://github.com/qubvel/segmentation_models.pytorch#encoders-
  encoder_architecture: resnet18

  # Either boolean flag or string with that indicates whether the selected encoder architecture should load pretrained
  # weights or use randomly initialized weights.
  # - In the case of boolean flag `true` means using pretrained weights from ImageNet and `false` means using randomly
  #   initialized weights.
  # - In the case of string the value should specify the name of the weights. For the list of available weights please
  #   refer to https://github.com/qubvel/segmentation_models.pytorch#encoders-
  pretrained: True


data:
  # Class for the PyTorch Dataset and arguments to it. AutoAlbument will create an object of this class using
  # the `instantiate` method from Hydra - https://hydra.cc/docs/next/patterns/instantiate_objects/overview/.
  #
  # Note that the target class value in the `_target_` argument should be located inside PYTHONPATH so Hydra could
  # find it. The directory with the config file is automatically added to PYTHONPATH, so the default value
  # `dataset.SearchDataset` points to the class `SearchDataset` from the `dataset.py` file. This `dataset.py` file is
  # located along with the `search.yaml` file in the same directory provided by `--config-dir`.
  #
  # As an alternative, you could provide a path to a Python file with the dataset using the `dataset_file` parameter
  # instead of the `dataset` parameter. The Python file should contain the implementation of a PyTorch dataset for
  # augmentation search. The dataset class should have named `SearchDataset`. The value in `dataset_file` could either
  # be a relative or an absolute path ; in the case of a relative path, the path should be relative to this config
  # file's location.
  #
  # - Example of a relative path:
  # dataset_file: dataset.py
  #
  # - Example of an absolute path:
  # dataset_file: /projects/pytorch/dataset.py
  #
  dataset:
    _target_: dataset.SearchDataset

  # A list of preprocessing augmentations that will be applied to each image before applying augmentations from
  # a policy. A preprocessing augmentation should be defined as `key`: `value`, where `key` is the name of augmentation
  # from Albumentations, and `value` is a dictionary with augmentation parameters. The found policy will also apply
  # those preprocessing augmentations before applying the main augmentations.
  #
  # Here is an example of an augmentation pipeline that first pads an image to the size 512x512 pixels, then resizes
  # the resulting image to the size 256x256 pixels and finally crops a random patch with the size 224x224 pixels.
  #
  #  preprocessing:
  #    - PadIfNeeded:
  #        min_height: 512
  #        min_width: 512
  #    - Resize:
  #        height: 256
  #        width: 256
  #    - RandomCrop:
  #        height: 224
  #        width: 224
  #
  preprocessing: null

  # Parameters for the PyTorch DataLoader. Please refer to the PyTorch documentation for the description of parameters -
  # https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader.
  dataloader:
    _target_: torch.utils.data.DataLoader
    batch_size: 64
    num_workers: 8

optim:
  # Number of epochs to search parameters of augmentations.
  epochs: 20

  # Optimizer configuration for Semantic Segmentation Model
  main:
    _target_: torch.optim.Adam
    lr: 1e-3
    betas: [0, 0.999]

  # Optimizer configuration for Policy Model
  policy:
    _target_: torch.optim.Adam
    lr: 1e-3
    betas: [0, 0.999]

hydra:
  run:
    # Path to the directory that will contain all outputs produced by the search algorithm. `${config_dir:}` contains
    # path to the directory with the `search.yaml` config file. Please refer to the Hydra documentation for more
    # information - https://hydra.cc/docs/configure_hydra/workdir.
    dir: ${config_dir:}/outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
